"""
Django settings for SMSite project.

Generated by 'django-admin startproject' using Django 3.1.8.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
from dotenv import load_dotenv
from os import getenv as env, getenv
import os
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

load_dotenv(os.path.join(BASE_DIR, ".env"))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'dsy2((4kqov$vgwfy+6awf-m@hyesnux^ck1md8=t@&q+2g*yi'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]

## Email settings
#EMAIL_TIMEOUT=1
EMAIL_HOST = env("EMAIL_HOST", '')
EMAIL_PORT = env("EMAIL_PORT", None)
EMAIL_HOST_USER = env("EMAIL_HOST_USER", '')
EMAIL_HOST_PASSWORD = env("EMAIL_HOST_PASSWORD", '')
EMAIL_USE_SSL = env("EMAIL_USE_SSL", True)

## Strap settings
STRIPE_PUBLISHABLE_KEY = env("STRIPE_PUBLISHABLE_KEY", '')
STRIPE_SECRET_KEY = env("STRIPE_SECRET_KEY", '')
## Subscription settings
MAILCHIMP_API_KEY = env("MAILCHIMP_API_KEY", '')
MAILCHIMP_DATA_CENTER = env("MAILCHIMP_DATA_CENTER", '')
MAILCHIMP_EMAIL_LIST_ID = env("MAILCHIMP_EMAIL_LIST_ID", '')
## Wallet Address settings
WALLET_ADDRESS = env("WALLET_ADDRESS", '')
## Wallet Address settings
THIS_URL = env("THIS_URL", '')

# Application definition

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'mptt',
    'mathfilters',
    'mainsite',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'SMSite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'SMSite.wsgi.application'


DATABASE_ROUTERS = ['mainsite.dbrouters.BlackListRouter']

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {}

## setup default database or fall back to sqlite3
if getenv('default_database'):
    DATABASES['default'] = {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': getenv('default_database'),
        'USER': getenv('dbuser'),
        'PASSWORD': getenv('dbpass'),
        'HOST': getenv('dbhost'),
        'PORT': getenv('dbport'),
    }
else:
    DATABASES['default'] = {
      'ENGINE': 'django.db.backends.sqlite3',
      'NAME': BASE_DIR / 'db.sqlite3',
    }

if getenv('blacklist_database'):
    DATABASES['blacklist_db'] = {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': getenv('blacklist_database'),
        'USER': getenv('dbuser'),
        'PASSWORD': getenv('dbpass'),
        'HOST': getenv('dbhost'),
        'PORT': getenv('dbport'),
        'OPTIONS': {
            'compress': True
        },
    }
else:
    DATABASES['blacklist_db'] = {
      'ENGINE': 'django.db.backends.sqlite3',
      'NAME': BASE_DIR / 'blacklist.sqlite3',
    }





# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'
MEDIA_URL = '/media/'

STATIC_ROOT = BASE_DIR / 'SMSite/static/'
MEDIA_ROOT = BASE_DIR / 'SMSite/media/'

CROWN_TEST_MODE = True
if CROWN_TEST_MODE:
    CONTRACT_POOL_ACCOUNT_PRIVATE_KEY = getenv('CONTRACT_POOL_ACCOUNT_PRIVATE_KEY')
    CONTRACT_POOL_WALLET_ADDRESS = getenv('CONTRACT_POOL_WALLET_ADDRESS')
    HRC20_CROWN_ABI = getenv('HRC20_CROWN_ABI')
    HRC20_CROWN_DECIMALS = int(getenv('HRC20_CROWN_DECIMALS'))
    HRC20_CROWN_ADDRESS = getenv('HRC20_CROWN_ADDRESS')
    CROWN_GAS_LIMIT = int(getenv('CROWN_GAS_LIMIT'))
    LIMIT_WAIT_TIME = int(getenv('LIMIT_WAIT_TIME'))
    CRONW_GAS_URL = getenv('CRONW_GAS_URL')
    CRONW_GAS_LEVEL = getenv('CRONW_GAS_LEVEL')
    HARMONY_NETWORKS = [
        {"id": 1, "chainid": 1666700000, "rpc_url": "https://api.s0.b.hmny.io"},
        {"id": 2, "chainid": 1666700001, "rpc_url": "https://api.s1.b.hmny.io"},
        {"id": 3, "chainid": 1666700002, "rpc_url": "https://api.s2.b.hmny.io"},
        {"id": 4, "chainid": 1666700003, "rpc_url": "https://api.s3.b.hmny.io"},
    ]
    BINANCE_NETWORKS = [
        {"id": 1, "chainid": 97, "rpc_url": "https://data-seed-prebsc-1-s1.binance.org:8545"},
    ]
    DEFAULT_TAX_PERCENT = getenv('DEFAULT_TAX_PERCENT')
    BEP20_CROWN_ABI = getenv('BEP20_CROWN_ABI')
    BEP20_CROWN_DECIMALS = int(getenv('BEP20_CROWN_DECIMALS'))
    BEP20_CROWN_ADDRESS = getenv('BEP20_CROWN_ADDRESS')
    BEP20_CROWN_GAS_LIMIT = int(getenv('BEP20_CROWN_GAS_LIMIT'))
else:
    CONTRACT_POOL_ACCOUNT_PRIVATE_KEY = getenv('CONTRACT_POOL_ACCOUNT_PRIVATE_KEY')
    CONTRACT_POOL_WALLET_ADDRESS = getenv('CONTRACT_POOL_WALLET_ADDRESS')
    HRC20_CROWN_ABI = getenv('HRC20_CROWN_ABI')
    HRC20_CROWN_DECIMALS = int(getenv('HRC20_CROWN_DECIMALS'))
    HRC20_CROWN_ADDRESS = getenv('HRC20_CROWN_ADDRESS')
    CROWN_GAS_LIMIT = int(getenv('CROWN_GAS_LIMIT'))
    LIMIT_WAIT_TIME = int(getenv('LIMIT_WAIT_TIME'))
    CRONW_GAS_URL = getenv('CRONW_GAS_URL')
    CRONW_GAS_LEVEL = getenv('CRONW_GAS_LEVEL')
    HARMONY_NETWORKS = [
        {"id": 1, "chainid": 1666600000, "rpc_url": "https://api.harmony.one"},
        {"id": 2, "chainid": 1666600001, "rpc_url": "https://s1.api.harmony.one"},
        {"id": 3, "chainid": 1666600002, "rpc_url": "https://s2.api.harmony.one"},
        {"id": 4, "chainid": 1666600003, "rpc_url": "https://s3.api.harmony.one"},
    ]
    BINANCE_NETWORKS = [
        {"id": 1, "chainid": 56, "rpc_url": "https://bscnode1.anyswap.exchange"},
    ]
    DEFAULT_TAX_PERCENT = getenv('DEFAULT_TAX_PERCENT')
    BEP20_CROWN_ABI = getenv('BEP20_CROWN_ABI')
    BEP20_CROWN_DECIMALS = int(getenv('BEP20_CROWN_DECIMALS'))
    BEP20_CROWN_ADDRESS = getenv('BEP20_CROWN_ADDRESS')
    BEP20_CROWN_GAS_LIMIT = int(getenv('BEP20_CROWN_GAS_LIMIT'))